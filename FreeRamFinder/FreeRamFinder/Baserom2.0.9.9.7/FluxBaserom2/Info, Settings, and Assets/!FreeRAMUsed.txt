I haven't bothered to change the defaults for a few sprites and other things
that use FreeRAM, e.g. if you use Kevin's Reznors. 

For all intents and purposes, everything marked as empty in the SMWC map is free: $60-$63; $79, $7C, etc. ($15E8 is an exception.) 
Disabling the bonus game also freed up 4 continuous bytes at $13F4-8 (though these first rhree are used for one optional per-level Uber). 
(There are 8 continuous @ 18C5, cleared at level load.)
Not cleared at level load (five continuous each): $0F3A-$0F3F; $0F42-$0F47

_________


$0DE0-$0EF4 was initially newly freed
! Used: $0DE0-$0DFB (27 bytes)
! Used: $0E51-$0EF4 (159 bytes, though some still free: )

$0E31-$0E50 still free


GLOBAL or BASICALLY GLOBAL

$191F = now free 
$1926-27: playlist ASM and mute music (not cleared at level load)
$1929 = now free
$192C now free 

$0DC4-6: custom shooting powerups 

* $0DE0 = Screen shake
* $0DE1-$0DE8 actually per-level: disable individual controls
* $0DE9 = L/R scroll condition

$0DEA and $0DEB used for cape ground pound detect patch
$0DEC: status bar counter functionality 
$0DED and $0DEE: first is fireball flag (any fireballs), second is L/R fireball flag
$0DEF and $0DF0 for cannon/shooter blocks

* $0DF1 = horizontal scroll snap fix
* $0DF2 = goal sphere / orb music change toggle
* $0DF3 = small Mario fireball
$0DF4-7, item reserve sprite status
* $0DF8, ItemReserveFallIfDamageConditional.asm
* $0DF9, can disable select activating item box
* $0DFA, pause message, etc.
$0DFB = p switch music restore
* $0DFC = disable duck 
* $0DFD = up or down fireball
* $0DFE = vine grow speed adjust
* $0DFF = fireball counter

* $0E00 = Re-enable normal sloped pipe interaction
* $0E01 = magikoopa won't respawn after being killed
$0E02 = If $0EB7 set first, will HP/damage system 
$0E03 = increment/decrement for HP
$0E04 (actually per-level) = Delay FreeRAM for short freeze trigger, emulate damage
$0E05 = FreeRAM to INC to TRIGGER short freeze, HP system damage
$0E06 = status bar toggle
$0E07 = used for disable select exit toggled
$0E08 = if enabled, vanilla float delay
$0E09 = if enabled, normal vanilla freeze length when baby Yoshi grow big
$0E0A = sprite item box disable
$0E0B = conditional if muncher or enemy during goal walk
$0E0C = 1-up sound frequency thing (Instant1UpsWithoutQueue.asm)
$0E0D = Speed oscillation
$0E0E = disable jump/fly when cape
$0E0F = interaction line def (don't have to clear @ level load?) 
$0E10 = interaction line def pt 2 (don't have to clear @ level load?) - both this @ previous also for crystal tap
$0E11 = interaction line cosine tide (don't have to clear @ level load?)
$0E12 = interaction line !InteractSubpix (don't have to clear @ level load?)
$0E13 = interaction line !TideSpeed (cleared @ level load)
$0E14 = don't use to be safe?
$0E15 = interaction line !TideDir (cleared @ level load)
$0E16 = interaction line cosine !FrameCounter (cleared @ level load)
$0E17 = interaction line  (not cleared @ level load)

$0E18 = layer 2 manual scroll
$0E19 = layer 1 customizable autoscroll
$0E1A and $0E1B = conditional death SFX
$0E1C = small fire Mario powerup flower
$0E1D = switch palace switch arbitrary RAM
$0E1E = swallow sprite doesn't give coin
$0E1F = Disable NoMoreSpriteTileLimits

$0E20 = When active allow spin jump from noteblock
$0E21 = When active disables frame-perfect spin-jump from noteblock
$0E22 = for direction-controlled autowalker/runner
$0E23 = throwblock limited spawn
$0E24 = re-enable baby Yosh double eat
$0E25 = reserved for reverse grav
$0E26 = cape spin disable?
$0E27 = When set, Will kill you and reset when you don't get switch palace yump
$0E28 = When set, Will do something else you get switch palace yump
$0E29 = set when you don't get switch palace yump (when $0E27 set)
$0E2A = Yosh swallow powerup block w/o affectng Mar
$0E2B = double jump
$0E2C = flag-controlled slower tempo
$0E2D = if set, goal sphere / orb won't freeze you n place, works w/ $0E6F
$0E2E = bounce on enemy detection
$0E2F = wall-kick patch enable ($0E70-72 are FreeRAM)
$0E30 = p-switch doesn't make ticking sound
____

$0E88-9F is reserved for SmokeOffscreenGlobal patch if applied. (Not sure if compatible with Smoke Image Consistency patch)

$0EA0: flight direction change consistency (clear at level load)
$0EA1-5: screen-scrolling pipes. 
{$0EA6-7 and $0EA8-9 for SSP drag/warp pipe thing}
$0EAA = pt 1 of layer 2 triangle and falloff fix
{$0EAB optional for skull raft movement fix}  
$0EAC = pause buffer length toggle
$0EAD-E: message box bounce sprite delay
$0EAF (actually per-level): revert code/address after certain # of frames-B0
$0EB0-1 (actually per-level): delay before running code example
$0EB2: Can be used to disable start+select exit
$0EB3: no carry, force drop (formerly mosaic stuff, skills challenge counter???)
$0EB4-6: Enable custom bullet shooter, p-balloon, p-switch timers.
$0EB7-8: Disable death patch flags
* $0EB9-BA: $0EB9 pauses per-level timer. $0EBA makes it not show up at all until...
$0EBB: insta-death on powerup loss if enabled
$0EBC-$0EC0, FreeRAM blocks / various global Uber
$0EC0: When set, DisableFirstFrameJumpAfterLanding.asm (may be broken)
$0EC1: block dup
$0EC2 disables star timer SFX when low
$0EC3: When set, no powerup/powerdown freeze 
$0EC4: When set, this will skip the COURSE CLEAR stuff (including fadeout), to not kill your layer 3
$0EC5-6 = optional sprite hitbox display, test chamber
* $0EC7-CE (8): reserved FreeRAM blocks, Map16 (also $0ED8-9)
$0ECF - D2, FreeRAM fake block shells {also D6?}
$0ED3-4: slippery blocks (original $7FB500 and $7FB501)
$0ED5: on/off cooldown
$0ED6 (see above)
$0ED7: enable vanilla death anim + retry hybrid
$0ED8-9, FreeRAM blocks main
$0EDA used to increase and control fireball patch
$0EDB:  layer 3 tide direction controller, if used

* $0EEB for goal tape move left flag

[See per-level and placeholder for $0EDD and onwards; also $0DE0  

$0F5E - $0F6E for extending blocks (16 bytes). Normally not cleared level load.

$13F8

$14BE, if you use the SwitchBetweenMarioAndLuigiWhenRetry.asm (also p-switch normal sound restore)
$1F2B, first three bits (not cleared ever, basically)

$7F8600-4 or more = Interaction line HdmaFreeRAM (actually per-level?)
$7F9600 (to $7F9715), 277 (hex 0x115) bytes are used, OW sprites -- moved from $0DE0-$0EF4.
$7FA00B, RAM_PalUpdateFlag
$7FA034, RAM_PlayerPalPtr
$7FA105 and $7FA205, sticky block
Few addresses around $7FA200, A300, A400: RNG room stuff
$7FA240 + 16 = RNG room thing

$7FB400 - $7FB630, retry
$7FB740, pt 2 of layer 2 triangle and falloff fix
$7FC060, conditional Map16, 01/02 InvisibleKaizoBlockNeverReappearsAfterDeath.asm (conditional Map16 1?). and Midway
$7FC0FC = 00/01 for alternate on/off (Custom 0)? On/off coin??
$7FC275 and $7FC279, custom bounce blocks

_______________________________
_______________________________


PER-LEVEL: OPTIONAL AND PLACEHOLDERS.

This means these addresses are free to use in your level,
if you're not using the associated assets in the level. 

$7C for playlist display (only used in one level)


0E0D-50 still free
$0E51, UberASM dolphin generator timer
$0E52, three digit counter
$0E53 = move layer 3 with L/R
$0E54 = score trigger
$0E55, password system
$0E57-8, revert pose + small Mario fireball (which includes revert pose)
$0E59 - $0E6D (14 in hex, 20 in decimal), if OW warp or alt Mario palette thing used (latter no longer needed)
$0E6E = spawn sprite above pose set
$0E6F, freeze Mario on flag (e.g. freeze completely upon horizontal orb)
$0E70-2, wall kick/slide
$0E73-7B: horizontal layer 3 smashers
$0E7C-D: teleport delay for midway thing and switch palace
$0E7E-80, autoscroll to next screen (then stop) when enemies defeated
$0E81, idle sleep
$0E82-3, pose stuff
$0E84-85: Constant earthuake trigger Uber
$0E86-7: DisableHeldSpriteInteraction

$0EAB optional for skull raft movement fix 

$0EDC, used for freeze sprites Uber
$0EDD-E, and 0EDF-$0EE0 for single-screen Uber
$0EE1, yump disable
$0EE2-3 for fading lights
$0EE4-5 for portable orb teleport sprite
$0EE6, metroid timer
$0EE7, sprite offscreen indicator
$0EE8 and $0EE9 for sprite and Mario speed slowdown / slow-mo
(optional patch) $0EEA for Extended NMSTL
[$00EB was used globally]
$0EEC-F, reserved for sprite scroll fix (if applied)
$0EF0 = mushroom carry block/sprite
; $0EF1 = [] and skills challenge counter RAM
$0EF2 for SpriteMorphOnOff Uber
$0EF3 for on/off auto-cycle
$0EF4 sprite stack optional FreeRAM, but...

$0F62 for sprite mist generator

$13F4-6 for consistent wall clips
 
$14C1 if BringYoshiEatenItem Through... Uber used (should be cleared on reset and ow load but not on level load)
$146C, $1487, $1489: stopwatch, a.k.a. Metroid timer

$1FD6, unused sprite table, sticky block

$18B4, $18B7, and $18CD for flutter jump

~ $06F9-$06FF for optional DMA Queue and Block Change patch

$7FA000-$7FA004, if you insert alternate Mario and animation (GFX32 and 33) ExGFX code
$7FA042, $7FA046, $7FA048, motor skills?
$7FA600, 1024 bytes [] (400 in hex, from $7FA600 to hex $7FAA00), if you patch Inline layer 3. Also WRAM because code is handled by SNES.
$7FB310-$7FB317 if BringYoshiEatenItem Through... Uber used (should not cleared on level load)
$7FB700 and $7FB800 (12 bytes, give or take), for optional DMA Queue and Block Change patch 
$7FB900 - $7FBA5D (349 bytes!), freeze sprites Uber
$7FBFFF for per-level counters (and for OW level creator name display, but only on OW??)
$7FC0FD for input display Uber
$7FC600, 24 bytes, sparkling effect
$7FC700 (18 * 8 = 144 bytes), if Inline layer 3. MessageBuff. 




_________

Kevin's reznors:

!ReznorCounter      =   $7C         ; Always used. Must be an address which is reset on level load.
!TotReznor          = $0DA1|!Base2  ; Always used.
!EndTimerRam        = $13E6|!Base2  ; Always used.
!FreeRam            = $0DD4|!Base2  ; Only used if !DivideSpeedBy is greater than $01.
!FreeRam2           = $13C8|!Base2  ;\ Only used if !MinRadius is different from !MaxRadius.
!RadiusRam          = $15E8|!Base2  ;|
!RadiusTimer        = $0D9C|!Base2  ;/
_________



Freespace:

VRAM Opt, 8 bytes @ $00BA56
(Optional) player select: $00BA4D? 
if Thwomp falling fix: $94EBD5, 115 bytes

